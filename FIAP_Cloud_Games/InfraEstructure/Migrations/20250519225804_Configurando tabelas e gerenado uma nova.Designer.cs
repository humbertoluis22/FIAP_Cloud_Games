// <auto-generated />
using System;
using InfraEstructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfraEstructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250519225804_Configurando tabelas e gerenado uma nova")]
    partial class Configurandotabelasegerenadoumanova
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entity.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Biblioteca", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DataAquisicao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("JogoEmprestado")
                        .HasColumnType("bit");

                    b.Property<int>("JogoID")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("JogoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Biblioteca", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Jogo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Desenvolvedor")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdAdmin")
                        .HasColumnType("int");

                    b.Property<string>("NomeJogo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("IdAdmin");

                    b.ToTable("Jogo", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TentativasErradas")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Core.Entity.Biblioteca", b =>
                {
                    b.HasOne("Core.Entity.Jogo", "Jogo")
                        .WithMany("Bibliotecas")
                        .HasForeignKey("JogoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entity.Usuario", "Usuario")
                        .WithMany("Bibliotecas")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jogo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entity.Jogo", b =>
                {
                    b.HasOne("Core.Entity.Admin", "Admin")
                        .WithMany("Jogos")
                        .HasForeignKey("IdAdmin")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Core.Entity.Admin", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("Core.Entity.Jogo", b =>
                {
                    b.Navigation("Bibliotecas");
                });

            modelBuilder.Entity("Core.Entity.Usuario", b =>
                {
                    b.Navigation("Bibliotecas");
                });
#pragma warning restore 612, 618
        }
    }
}
